!function(){"use strict";const e={name:"Text",category:"Formatter",description:"Performs various advanced text manipulation operations.",spices:[{id:"operationType",label:"Operation Type",type:"select",value:"prefixSuffix",options:[{label:"Add Prefix/Suffix",value:"prefixSuffix"},{label:"Find and Replace",value:"findReplace"},{label:"Clean Text",value:"cleanText"},{label:"Extract Text",value:"extractText"},{label:"Reverse Text",value:"reverseText"}],description:"Select the type of text manipulation to perform."},{id:"prefixText",label:"Prefix Text",type:"string",value:"",placeholder:"Text to add at the beginning",description:"Text to add as a prefix to the input.",dependsOn:[{spiceId:"operationType",value:"prefixSuffix"}]},{id:"suffixText",label:"Suffix Text",type:"string",value:"",placeholder:"Text to add at the end",description:"Text to add as a suffix to the input.",dependsOn:[{spiceId:"operationType",value:"prefixSuffix"}]},{id:"addNumbers",label:"Add Line Numbers",type:"boolean",value:!1,description:"If enabled, line numbers will be added to each line.",dependsOn:[{spiceId:"operationType",value:"prefixSuffix"}]},{id:"startNumber",label:"Starting Line Number",type:"number",value:1,min:0,step:1,description:"The number to start counting lines from when adding line numbers.",dependsOn:[{spiceId:"operationType",value:"prefixSuffix"},{spiceId:"addNumbers",value:!0}]},{id:"lineNumberSeparator",label:"Line Number Separator",type:"string",value:". ",placeholder:". ",description:'The separator between the line number and the line content (e.g., ". ", ": ", " - ").',dependsOn:[{spiceId:"operationType",value:"prefixSuffix"},{spiceId:"addNumbers",value:!0}]},{id:"findText",label:"Find Text",type:"string",value:"",placeholder:"Text to find",description:"The text to search for within the input.",dependsOn:[{spiceId:"operationType",value:"findReplace"}]},{id:"replaceText",label:"Replace With",type:"string",value:"",placeholder:"Text to replace with",description:"The text to replace found instances with.",dependsOn:[{spiceId:"operationType",value:"findReplace"}]},{id:"caseSensitive",label:"Case Sensitive",type:"boolean",value:!1,description:"Perform a case-sensitive find and replace.",dependsOn:[{spiceId:"operationType",value:"findReplace"}]},{id:"isRegex",label:"Treat Find Text as Regex",type:"boolean",value:!1,description:'If enabled, "Find Text" will be interpreted as a regular expression.',dependsOn:[{spiceId:"operationType",value:"findReplace"}]},{id:"cleanText",label:"Cleaning Operation",type:"select",value:"trimCharacters",options:[{label:"Trim Characters",value:"trimCharacters"},{label:"Remove Leading Spaces",value:"removeLeadingSpaces"},{label:"Remove Trailing Spaces",value:"removeTrailingSpaces"},{label:"Replace Spaces with Tabs",value:"replaceSpacesWithTabs"},{label:"Replace Tabs with Spaces",value:"replaceTabsWithSpaces"},{label:"Remove Blank/Empty Lines",value:"removeBlankEmptyLines"},{label:"Replace Line Break with Space",value:"replaceLineBreakWithSpace"},{label:"Multiple Spaces to Single",value:"multipleSpacesToSingle"},{label:"Multiple Blank Lines to Single",value:"multipleBlankLinesToSingle"},{label:"Remove All Line Breaks",value:"removeAllLineBreaks"},{label:"Remove Duplicate Lines/Paragraphs",value:"removeDuplicateLines"},{label:"Remove Repeating Words",value:"removeRepeatingWords"},{label:"Remove Non-ASCII Characters",value:"removeNonAscii"},{label:"Remove Non-Alphanumeric Characters",value:"removeNonAlphanumeric"}],description:"Select the specific cleaning operation to perform.",dependsOn:[{spiceId:"operationType",value:"cleanText"}]},{id:"trimCharacters",label:"Trim Type",type:"select",value:"trimWhitespace",options:[{label:"Trim Whitespace",value:"trimWhitespace"},{label:"Remove Left Characters",value:"removeLeftCharacters"},{label:"Remove Right Characters",value:"removeRightCharacters"}],description:"Select the specific character trimming operation to perform.",dependsOn:[{spiceId:"operationType",value:"cleanText"},{spiceId:"cleanText",value:"trimCharacters"}]},{id:"trimCharacterAmount",label:"Amount",type:"number",value:1,min:0,step:1,description:"The number of characters to remove from the specified side.",dependsOn:[{spiceId:"operationType",value:"cleanText"},{spiceId:"cleanText",value:"trimCharacters"},{spiceId:"trimCharacters",value:["removeLeftCharacters","removeRightCharacters"]}]},{id:"numberOfSpaces",label:"Number of Spaces",type:"number",value:4,min:1,step:1,description:"Number of spaces for tab/space conversion.",dependsOn:[{spiceId:"operationType",value:"cleanText"},{spiceId:"cleanText",value:["replaceSpacesWithTabs","replaceTabsWithSpaces"]}]},{id:"reverseUnit",label:"Reverse By",type:"select",value:"character",options:[{label:"Character",value:"character"},{label:"Word",value:"word"},{label:"Line",value:"line"}],description:"Determines how the text is reversed.",dependsOn:[{spiceId:"operationType",value:"reverseText"}]},{id:"extractType",label:"Extraction Type",type:"select",value:"byRange",options:[{label:"By Line Range",value:"byRange"},{label:"By Regex",value:"byRegex"},{label:"By Character Amount",value:"byCharAmount"}],description:"Select whether to extract text by line range or by regular expression.",dependsOn:[{spiceId:"operationType",value:"extractText"}]},{id:"extractStartLine",label:"Start Line (1-based)",type:"number",value:1,min:1,step:1,description:"The 1-based starting line number to extract.",dependsOn:[{spiceId:"operationType",value:"extractText"},{spiceId:"extractType",value:"byRange"}]},{id:"extractEndLine",label:"End Line (1-based)",type:"number",value:10,min:1,step:1,description:"The 1-based ending line number to extract.",dependsOn:[{spiceId:"operationType",value:"extractText"},{spiceId:"extractType",value:"byRange"}]},{id:"extractCharAmount",label:"Character Amount",type:"number",value:10,min:1,step:1,description:"The number of characters to extract from the start or end of the text.",dependsOn:[{spiceId:"operationType",value:"extractText"},{spiceId:"extractType",value:"byCharAmount"}]},{id:"extractCharFrom",label:"Extract From",type:"select",value:"start",options:[{label:"Start of Text",value:"start"},{label:"End of Text",value:"end"}],description:"Specify whether to extract characters from the start or end of the text.",dependsOn:[{spiceId:"operationType",value:"extractText"},{spiceId:"extractType",value:"byCharAmount"}]},{id:"regexPattern",label:"Regex Pattern",type:"string",value:"",placeholder:"e.g., \\d+",description:"The regular expression pattern to search for.",dependsOn:[{spiceId:"operationType",value:"extractText"},{spiceId:"extractType",value:"byRegex"}]},{id:"regexFlags",label:"Regex Flags",type:"string",value:"g",placeholder:"e.g., gi",description:"Flags for the regular expression (e.g., g for global, i for case-insensitive, m for multiline).",dependsOn:[{spiceId:"operationType",value:"extractText"},{spiceId:"extractType",value:"byRegex"}]},{id:"outputFormat",label:"Output Format",type:"select",value:"fullMatch",options:[{label:"Full Match",value:"fullMatch"},{label:"First Capture Group",value:"captureGroup1"},{label:"All Matches (Comma Separated)",value:"allMatchesCommaSeparated"},{label:"All Matches (New Line)",value:"allMatchesNewLine"}],description:"How to format the extracted regex matches.",dependsOn:[{spiceId:"operationType",value:"extractText"},{spiceId:"extractType",value:"byRegex"}]}],run:(e,t)=>{const a=e.cast("string").value;if(!a.trim())return e.warning();switch(t.operationType){case"prefixSuffix":return e.update(function(e,t){const a=t.prefixText??"",r=t.suffixText??"";let n=e;if(t.addNumbers){const a=e.split("\n"),r=t.startNumber??1,i=t.lineNumberSeparator??". ";n=a.map((e,t)=>`${r+t}${i}${e}`).join("\n")}return`${a}${n}${r}`}(a,t));case"findReplace":return e.update(function(e,t){const a=t.findText??"",r=t.replaceText??"";if(!a)return e;let n="g";t.caseSensitive||(n+="i");const i=t.isRegex?a:a.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");try{const t=new RegExp(i,n);return e.replace(t,r)}catch(l){return console.error("Invalid regex pattern for find/replace:",l),`Error: Invalid regex pattern for find/replace. ${l instanceof Error?l.message:String(l)}`}}(a,t));case"cleanText":return e.update(function(e,t){switch(t.cleanText){case"trimCharacters":switch(t.trimCharacters){case"trimWhitespace":return e.trim();case"removeLeftCharacters":{const a=t.trimCharacterAmount??0;return e.substring(a)}case"removeRightCharacters":{const a=t.trimCharacterAmount??0;return e.substring(0,e.length-a)}default:return e}case"removeLeadingSpaces":return e.replace(/^[ \t]+/gm,"");case"removeTrailingSpaces":return e.replace(/[ \t]+$/gm,"");case"replaceSpacesWithTabs":{const a=t.numberOfSpaces??4;return e.replace(new RegExp(` {${a}}`,"g"),"\t")}case"replaceTabsWithSpaces":{const a=t.numberOfSpaces??4;return e.replace(/\t/g," ".repeat(a))}case"removeBlankEmptyLines":return e.split("\n").filter(e=>""!==e.trim()).join("\n");case"replaceLineBreakWithSpace":return e.replace(/(\r\n|\n|\r)/gm," ");case"multipleSpacesToSingle":return e.replace(/ {2,}/g," ");case"multipleBlankLinesToSingle":return e.replace(/(\r\n|\n|\r){2,}/g,"\n\n");case"removeAllLineBreaks":return e.replace(/(\r\n|\n|\r)/gm,"");case"removeDuplicateLines":{const t=e.split("\n");return Array.from(new Set(t)).join("\n")}case"removeRepeatingWords":return e.replace(/\b(\w+)(?:\s+\1\b)+/g,"$1");case"removeNonAscii":return e.replace(/[^\x00-\x7F]/g,"");case"removeNonAlphanumeric":return e.replace(/[^a-zA-Z0-9]/g,"");default:return e}}(a,t));case"reverseText":return e.update(function(e,t){return"word"===t.reverseUnit?e.split(/\s+/).reverse().join(" "):"line"===t.reverseUnit?e.split("\n").reverse().join("\n"):e.split("").reverse().join("")}(a,t));case"extractText":return e.update(function(e,t){if("byRange"===t.extractType){const a=e.split("\n"),r=Math.max(0,(t.extractStartLine??1)-1),n=Math.min(a.length,t.extractEndLine??a.length);return a.slice(r,n).join("\n")}if("byCharAmount"===t.extractType){const a=t.extractCharAmount??0;return a<=0?e:"end"===t.extractCharFrom?e.slice(-a):e.slice(0,a)}if("byRegex"===t.extractType){const r=t.regexPattern??"";if(!r)return"";try{const a=t.regexFlags??"g",n=new RegExp(r,a),i=[];let l;for(;null!==(l=n.exec(e));)"captureGroup1"===t.outputFormat&&void 0!==l[1]?i.push(l[1]):i.push(l[0]);return"allMatchesCommaSeparated"===t.outputFormat?i.join(", "):"allMatchesNewLine"===t.outputFormat?i.join("\n"):i[0]??""}catch(a){return console.error("Invalid regex pattern or flags:",a),`Error: Invalid regex pattern or flags. ${a instanceof Error?a.message:String(a)}`}}return e}(a,t));default:return e.update(a)}}};Baratie.ingredient.register(e)}();
