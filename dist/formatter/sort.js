!function(){"use strict";const e={name:"Sort",category:"Formatter",description:"Sorts text lines based on various criteria.",spices:[{id:"sortType",label:"Sort By",type:"select",value:"alphabetical",options:[{label:"Alphabetical",value:"alphabetical"},{label:"Length",value:"length"},{label:"Numeric",value:"numeric"}],description:"Determines how lines are sorted."},{id:"sortOrder",label:"Order",type:"select",value:"ascending",options:[{label:"Ascending",value:"ascending"},{label:"Descending",value:"descending"}],description:"Determines the sort order."},{id:"caseSensitive",label:"Case Sensitive",type:"boolean",value:!1,description:"Perform a case-sensitive sort."},{id:"removeDuplicates",label:"Remove Duplicates Before Sort",type:"boolean",value:!1,description:"Remove duplicate lines before sorting."}],run:(e,t)=>{const r=e.cast("string").value;return r.trim()?e.update(function(e,t){let r=e.split("\n");return t.removeDuplicates&&(r=Array.from(new Set(r))),r.sort((e,r)=>{let a=0;const i=t.caseSensitive?e:e.toLowerCase(),s=t.caseSensitive?r:r.toLowerCase();switch(t.sortType){case"length":a=i.length-s.length;break;case"numeric":a=parseFloat(i)-parseFloat(s);break;default:a=i.localeCompare(s)}return"descending"===t.sortOrder?-a:a}),r.join("\n")}(r,t)):e.warning()}};Baratie.ingredient.register(e)}();
